// automata.dot

// Copyright 2020 cnngimenez

// Author: cnngimenez

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

digraph {
        rankdir=LR;
        node [];

        e_string_literal_quote [style=filled, fillcolor="#88ff88"];
        e_string_literal_quote1 [style=filled, fillcolor="#88ff88"];
        e_string_literal_single_quote [style=filled, fillcolor="#88ff88"];
        e_string_literal_single_quote1 [style=filled, fillcolor="#88ff88"];
        e_sllsq [style=filled, fillcolor="#88ff88"];
        e_sllq [style=filled, fillcolor="#88ff88"];
        see_automata_png [shape=plaintext, label="See automata.png"];
        
        // STRING_LITERAL_QUOTE ::= '"' ([^#x22#x5C#xA#xD] | ECHAR | UCHAR)* '"' /* #x22=" #x5C=\ #xA=new line #xD=carriage return */
        start -> doublequote [label="\""]
        start -> singlequote [label="'"]        
        start -> see_automata_png [style=dotted];
        
        doublequote -> i_string_literal_quote [label="[^#x22#x5C#xA#xD]"];
        doublequote -> e_string_literal_quote1 [label="\""];
        doublequote -> slq_backslash [label="\\"];

        // '"' (...)*
        i_string_literal_quote -> i_string_literal_quote [label="[^#x22#x5C#xA#xD]"];
        slq_backslash -> slq_uchar [label="u"];       
        slq_backslash -> slq_echar [label="[tbnrf\"'\\]"];

        slq_uchar -> slq_e_uchar [style=dotted, label="See uchar.png"];
        
        slq_e_uchar -> i_string_literal_quote [label="[^#x22#x5C#xA#xD]"];
        slq_e_uchar -> slq_backslash [label="\\"];
        slq_e_uchar -> e_string_literal_quote [label="\""];

        slq_echar -> i_string_literal_quote [label="[^#x22#x5C#xA#xD]"];
        slq_echar -> slq_backslash [label="\\"];
        slq_echar -> e_string_literal_quote [label="\""];

        i_string_literal_quote -> e_string_literal_quote [label="\""];

        // STRING_LITERAL_SINGLE_QUOTE ::= "'" ([^#x27#x5C#xA#xD] | ECHAR | UCHAR)* "'" /* #x27=' #x5C=\ #xA=new line #xD=carriage return */        
        singlequote -> i_string_literal_single_quote [label="[^#x27#x5C#xA#xD]"];
        singlequote -> e_string_literal_single_quote1 [label="'"];
        singlequote -> slsq_backslash [label="\\"];

        // '"' (...)*
        i_string_literal_single_quote -> i_string_literal_single_quote [label="[^#x27#x5C#xA#xD]"];
        slsq_backslash -> slsq_uchar [label="u"];       
        slsq_backslash -> slsq_echar [label="[tbnrf\"'\\]"];

        slsq_uchar -> slsq_e_uchar [style=dotted, label="See uchar.png"];
        
        slsq_e_uchar -> i_string_literal_single_quote [label="[^#x27#x5C#xA#xD]"];
        slsq_e_uchar -> slsq_backslash [label="\\"];
        slsq_e_uchar -> e_string_literal_single_quote [label="'"];

        slsq_echar -> i_string_literal_single_quote [label="[^#x27#x5C#xA#xD]"];
        slsq_echar -> slsq_backslash [label="\\"];
        slsq_echar -> e_string_literal_single_quote [label="'"];

        i_string_literal_single_quote -> e_string_literal_single_quote [label="\""];

        // STRING_LITERAL_LONG_SINGLE_QUOTE ::= "'''" (("'" | "''")? ([^'\] | ECHAR | UCHAR))* "'''"
        e_string_literal_single_quote1 -> i_sllsq [label="'"];

        i_sllsq -> sllsq_quote [label="'"];
        i_sllsq -> i_sllsq [label="[^'\\]"];
        i_sllsq -> sllsq_backslash [label="\\"];
        
        sllsq_quote -> sllsq_quote2 [label="'"];
        sllsq_quote -> i_sllsq [label="[^']"];
        sllsq_quote2 -> e_sllsq [label="'"];
        sllsq_quote2 -> sllsq_backslash [label="\\"];
        sllsq_quote2 -> i_sllsq [label="[^'\\]"];
        sllsq_quote -> sllsq_backslash [label="\\"];

        sllsq_backslash -> sllsq_echar [label="[tbnrf\"'\\]"];
        sllsq_backslash -> sllsq_uchar [label="u"];

        sllsq_echar -> sllsq_quote [label="'"];
        sllsq_echar -> i_sllsq [label="[^'\\]"];
        sllsq_echar -> sllsq_backslash [label="\\"];

        sllsq_uchar -> sllsq_e_uchar [style=dotted];
        sllsq_e_uchar -> sllsq_quote [label="'"];
        sllsq_e_uchar -> i_sllsq [label="[^'\\]"];
        sllsq_e_uchar -> sllsq_backslash [label="\\"];
        
        
        // STRING_LITERAL_LONG_QUOTE ::= '"""' (('"' | '""')? ([^"\] | ECHAR | UCHAR))* '"""'
        e_string_literal_quote1 -> i_sllq [label="\""];

        i_sllq -> sllq_quote [label="\""];
        i_sllq -> i_sllq [label="[^\"\\]"];
        i_sllq -> sllq_backslash [label="\\"];
        
        sllq_quote -> sllq_quote2 [label="\""];
        sllq_quote -> i_sllq [label="[^\"]"];
        sllq_quote2 -> e_sllq [label="\""];
        sllq_quote2 -> sllq_backslash [label="\\"];
        sllq_quote2 -> i_sllq [label="[^\"\\]"];
        sllq_quote -> sllq_backslash [label="\\"];

        sllq_backslash -> sllq_echar [label="[tbnrf\"'\\]"];
        sllq_backslash -> sllq_uchar [label="u"];

        sllq_echar -> sllq_quote [label="\""];
        sllq_echar -> i_sllq [label="[^\"\\]"];
        sllq_echar -> sllq_backslash [label="\\"];

        sllq_uchar -> sllq_e_uchar [style=dotted];
        sllq_e_uchar -> sllq_quote [label="\""];
        sllq_e_uchar -> i_sllq [label="[^\"\\]"];
        sllq_e_uchar -> sllq_backslash [label="\\"];
        
}
